/*
** DON'T EDIT THIS FILE **
It's been generated by Zapatos (v0.1.52), and is liable to be overwritten

Zapatos: https://jawj.github.io/zapatos/
Copyright (C) 2020 George MacKerron
Released under the MIT licence: see LICENCE file
*/

import type {
  JSONValue,
  JSONArray,
  DateString,
  SQLFragment,
  SQL,
  GenericSQLExpression,
  ColumnNames,
  ColumnValues,
  ParentColumn,
  DefaultType,
} from "./src/core";


/* === schema: public === */

/* --- enums --- */


/* --- tables --- */

export namespace bucket {
  export type Table = 'bucket';
  export interface Selectable {
    id: number;
    type: string;
    name: string;
    prefix: string;
    access_key: string;
    access_secret: string;
  }
  export interface Insertable {
    id?: number | DefaultType | SQLFragment;
    type: string | SQLFragment;
    name: string | SQLFragment;
    prefix: string | SQLFragment;
    access_key: string | SQLFragment;
    access_secret: string | SQLFragment;
  }
  export interface Updatable extends Partial<Insertable> { }
  export type Whereable = { [K in keyof Insertable]?: Exclude<Insertable[K] | ParentColumn, null | DefaultType> };
  export type JSONSelectable = { [K in keyof Selectable]:
    Date extends Selectable[K] ? Exclude<Selectable[K], Date> | DateString :
    Date[] extends Selectable[K] ? Exclude<Selectable[K], Date[]> | DateString[] :
    Selectable[K]
  };
  export type UniqueIndex = 'bucket_pkey';
  export type Column = keyof Selectable;
  export type OnlyCols<T extends readonly Column[]> = Pick<Selectable, T[number]>;
  export type SQLExpression = GenericSQLExpression | Table | Whereable | Column | ColumnNames<Updatable | (keyof Updatable)[]> | ColumnValues<Updatable>;
  export type SQL = SQLExpression | SQLExpression[];
}

/* === cross-table types === */

export type Table = bucket.Table;
export type Selectable = bucket.Selectable;
export type Whereable = bucket.Whereable;
export type Insertable = bucket.Insertable;
export type Updatable = bucket.Updatable;
export type UniqueIndex = bucket.UniqueIndex;
export type Column = bucket.Column;
export type AllTables = [bucket.Table];


export type SelectableForTable<T extends Table> = {
  bucket: bucket.Selectable;
}[T];

export type WhereableForTable<T extends Table> = {
  bucket: bucket.Whereable;
}[T];

export type InsertableForTable<T extends Table> = {
  bucket: bucket.Insertable;
}[T];

export type UpdatableForTable<T extends Table> = {
  bucket: bucket.Updatable;
}[T];

export type UniqueIndexForTable<T extends Table> = {
  bucket: bucket.UniqueIndex;
}[T];

export type ColumnForTable<T extends Table> = {
  bucket: bucket.Column;
}[T];

export type SQLForTable<T extends Table> = {
  bucket: bucket.SQL;
}[T];

